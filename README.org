:HEADER:
#+TITLE:    GNU/Linux Literate Configuration
#+AUTHOR:   André A. Gomes
#+EMAIL:    andremegafone@gmail.com
#+PROPERTY: header-args :results silent :mkdirp t :comments link
:END:

* Overview
| OS             | [[https://guix.gnu.org/][GNU/Linux Guix]]          |
| Text Editor    | [[https://www.gnu.org/software/emacs/][GNU Emacs]]               |
| Window Manager | [[https://github.com/ch11ng/exwm][EXWM]] & [[https://www.gnome.org/][GNOME]]            |
| Web Browser    | [[https://www.gnu.org/software/emacs/manual/html_node/eww/][eww]] & [[https://github.com/atlas-engineer/nyxt][Nyxt]] & [[https://www.gnu.org/software/gnuzilla/][GNU icecat]] |
| Shell          | [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]                  |
| Media Player   | [[https://www.gnu.org/software/emms/][emms]]                    |
| Mail/News      | [[http://www.gnus.org/][gnus]]                    |

* Motivation
Free/libre software grants users the 4 freedoms to run, study,
redistribute and improve programs.  These are extensible, and the
configurations can usually be saved as text hidden files, i.e. prepended
by a dot---that's why they're called *dotfiles*.  Users keep them so
that their computing environment is easily reproducible on a new
machine.  That's the scope of this project.

* Philosophy
All of my computing is centered around GNU Emacs.

[[https://www.youtube.com/watch?v=FLjbKuoBlXs&t=0][Let Protesilaos Stavrou tell you more about it]].

/Are you ready to go down the rabbit hole?/

I started using GNU Emacs in August 2018.

My life changed forever.

[[https://www.gnu.org/philosophy/philosophy.html][GNU is about freedom]].

If you want to know more about the GNU project and its founder, Richard
Stallman, I suggest reading [[https://static.fsf.org/nosvn/faif-2.0.pdf]["Free as in Freedom (2.0): Richard Stallman
and the Free Software Revolution"]].

#+begin_quote
I don't think that anything like Emacs could have been developed
commercially.  Businesses have the wrong attitudes.  The primary axiom
of the commercial world toward users is that they are incompetent, and
that if they have any control over their system they will mess it up.
The primary goal is to give them nothing specific to complain about, not
to give them a means of helping themselves.  [...]The secondary goal is
to give managers power over users, because it's the managers who decide
which system to buy, not the users.  If a corporate editor has any means
for extensibility, they will probably let your manager decide things for
you and give you no control at all.  For both of these reasons, a
company would never have designed an editor with which users could
experiment as MIT users did, and they would not have been able to build
on the results of the experiments to produce an Emacs.
#+end_quote
- [[https://www.lysator.liu.se/history/garb/txt/87-1-emacs.txt][Richard Stallman]]

* Systems and machines
GNU/Linux systems encompass the GNU system plus the Linux kernel.  They
come in many shapes and flavors---the so-called distros.  GNU Guix seems
to be the sanest choice for transparency and reproducibility, which are
paramount for scientific endeavours.  Besides that, it's extensible with
GNU Guile which is an implementation of Scheme.

** GNU Guix
[[http://logs.guix.gnu.org/guix/][IRC Logs]]

*** System
Your wireless chip will most likely not work when using the Linux-libre
kernel, so keep in mind the following suggestions:

- use an ethernet port (an adapter might be needed);
- use an Android to share the internet connection (USB tethering);
- use an external USB wireless chip such as the TL-WN821N that works
  with free software;
- replace the internal wireless chip so that it will compatible with
  free software.

(info "(guix) System Configuration")

#+begin_src scheme :tangle ~/.config/guix/system.scm
(use-modules (gnu)
             (guix packages)
             (srfi srfi-1))
(use-service-modules desktop sddm networking ssh xorg pm)
(use-package-modules gnome xorg linux)

;; (man "xorg.conf(5)")
;; (man "xinput(1)")
(define xorg-tweaks
  "Section \"InputClass\"
  Identifier \"Touchpad\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"
  Option \"Tapping\" \"on\"
  Option \"Accel Speed\" \"0.7\"
EndSection

Section \"Monitor\"
  Identifier \"eDP-1\"
  Option \"PreferredMode\" \"2560x1440\"
EndSection")

;; (info "(guix) operating-system Reference")
(operating-system
  (locale "en_US.utf8")
  (timezone "Europe/Moscow")
  ;; (timezone "Europe/Lisbon")
  (keyboard-layout
   (keyboard-layout
    "us,ru" "altgr-intl,"
    #:options
    '("caps:ctrl_modifier"
      "grp:win_space_toggle"
      "grp_led:caps"
      "lv3:ralt_switch_multikey")))
  (host-name "guix-xps13")
  (users (cons* (user-account
                 (name "aadcg")
                 (comment "André A. Gomes")
                 (group "users")
                 (home-directory "/home/aadcg")
                 (supplementary-groups
                  '("wheel" "netdev" "audio" "video")))
                %base-user-accounts))
  (kernel linux-libre-lts)
  (bootloader
   (bootloader-configuration
    (bootloader grub-efi-bootloader)
    (timeout 1)
    (target "/boot/efi")
    (keyboard-layout keyboard-layout)))
  (file-systems
   (cons* (file-system
            (mount-point "/boot/efi")
            (device (uuid "C820-AFF2" 'fat32))
            (type "vfat"))
          (file-system
            (mount-point "/")
            (device
             (uuid "76936a31-ce9b-4a50-a373-31db7a89ce41"
                   'ext4))
            (type "ext4"))
          %base-file-systems))
  (packages
   (append (map specification->package
                '("emacs-exwm"
                  "guix-simplyblack-sddm-theme"
                  "nss-certs"))
           %base-packages))
  (services
   (append
    (list
     (set-xorg-configuration
      (xorg-configuration
       (modules (list xf86-input-libinput
                      xf86-input-evdev))
       (keyboard-layout keyboard-layout)
       (extra-config (list xorg-tweaks)))
      sddm-service-type)
     (service gnome-desktop-service-type)
     (service sddm-service-type
              (sddm-configuration
               (theme "guix-simplyblack-sddm")))
     (service openssh-service-type)
     (service tor-service-type)
     (service tlp-service-type))
    (remove (lambda (service)
              (eq? (service-kind service) gdm-service-type))
            %desktop-services))
   (modify-services %desktop-services
     (guix-service-type
      config =>
      (guix-configuration
       (inherit config)
       (substitute-urls
        (append (list "https://mirror.brielmaier.net")
                %default-substitute-urls))
       (authorized-keys
        (append (list (local-file "~/.config/guix/mirror.brielmaier.net.pub"))
                %default-authorized-guix-keys)))))))
#+end_src

(info "(guix) Invoking guix system")

#+begin_src sh
sudo guix system reconfigure ~/.config/guix/system.scm
#+end_src

*** Channels
(info "(guix) Channels")

- [[https://lists.gnu.org/archive/html/help-guix/2020-12/msg00129.html][interesting question]]
- [[https://lists.gnu.org/archive/html/help-guix/2019-02/msg00108.html][interesting question 2]]

Follow these instructions.
https://gitlab.com/nonguix/nonguix/-/issues/70

#+begin_src scheme :tangle ~/.config/guix/channels.scm
(cons*
 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  (commit "3ada8acf78b8a48c7d92f2f20225eb1e4bfd60db")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 (channel
  (name 'aadcg)
  (url "https://git.sr.ht/~aadcg/aadcg-guix-channel"))
 %default-channels)
#+end_src

** Termux
#+begin_src sh
pkg upgrade
pkg install emacs git huspell huspell-ru
mkdir NextCloud
ln -s -t NextCloud/* ~/storage/shared/Android/media/com.nextcloud.client/nextcloud/up201106482@fc.up.pt@cloud.owncube.com/*
#+end_src

#+begin_src conf :tangle ~/.termux/termux.properties
extra-keys=[['TAB', 'ALT', '/', '-', '_', '~', '|', 'CTRL', 'UP', 'DOWN']]
bell-character=ignore
ctrl-space-workaround=true
#+end_src

* GNU Emacs and other configs
** Defaults and Aesthetics
*** Emacs package management
#+begin_src emacs-lisp
(defvar termux-p
  (not (null (getenv "ANDROID_ROOT")))
  "If non-nil, GNU Emacs is running on Termux.")

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(when termux-p
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)))

(use-package package
  :hook (package-menu-mode-hook . hl-line-mode))

(use-package use-package
  :custom
  ;; (use-package-compute-statistics t)
  ;; (use-package-verbose t)
  (use-package-hook-name-suffix nil))
#+end_src

*** My defaults
(info "(emacs) Dired")
(info "(emacs) Search")
(info "(autotype) Hippie Expand")

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq scroll-preserve-screen-position 'always)
(setq-default fill-column 72)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-always-indent 'complete)
;; (setq sentence-end-double-space t)
(when termux-p (global-visual-line-mode t))

(defun sudo ()
  "Use Tramp to sudo the current buffer."
  (interactive)
  (when buffer-file-name
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

(use-package minibuffer
  :custom
  (minibuffer-eldef-shorten-default t)
  :config (minibuffer-electric-default-mode))

(use-package files
  :custom (require-final-newline t)
  :config
  (defvar backups-dir (concat user-emacs-directory "backups/"))
  (unless (file-exists-p backups-dir) (mkdir backups-dir))
  (setq backup-directory-alist `(("." . ,backups-dir))
        tramp-backup-directory-alist backup-directory-alist)
  :hook (before-save-hook . delete-trailing-whitespace))

(use-package delsel
  :config (delete-selection-mode))

(use-package text-mode
  :config (setq-default major-mode 'text-mode)
  :hook (text-mode-hook . turn-on-auto-fill))

(use-package autorevert
  :custom (auto-revert-remote-files t)
  :config (global-auto-revert-mode))

(use-package frame
  :custom (blink-cursor-blinks 2))

(use-package cus-edit
  :custom (custom-file (concat user-emacs-directory "emacs-custom.el"))
  :hook (after-init-hook . (lambda () (unless (not (file-exists-p custom-file))
                                   (load custom-file)))))

(use-package proced
  :hook (proced-mode-hook . hl-line-mode))

(use-package ibuffer
  :custom
  (ibuffer-expert t)
  (ibuffer-default-sorting-mode 'major-mode)
  :hook (ibuffer-mode-hook . hl-line-mode)
  :bind (("C-x C-b" . ibuffer)))

(use-package dired
  :custom
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
  ;; (delete-by-moving-to-trash t)
  (dired-listing-switches "-Atrhl --group-directories-first")
  (dired-auto-revert-buffer t)
  :hook (dired-mode-hook . hl-line-mode)
  :bind ("C-x C-j" . dired-jump))

(use-package dired-x
  :hook (dired-load-hook . (lambda (x) (require 'dired-x))))

(use-package isearch
  :custom
  (search-whitespace-regexp ".*?")
  (isearch-lazy-count t))

(use-package apropos
  :custom (apropos-sort-by-scores t))

(use-package hippie-expand
  :bind ([remap dabbrev-expand] . hippie-expand))
#+end_src

**** Keybindings
(info "(elisp) Standard Keymaps")

| Key       | Function               |
|-----------+------------------------|
| <ESC>     | Meta                   |
| <f1>      | C-h                    |
| <f2>      | C-x 6                  |
| <f10>     | menu-bar-open          |
| C-c       | mode-specific-map      |
| C-h       | help-map               |
| C-u       | universal-argument-map |
| C-x       | lots of stuff          |
| C-x 4     | *-other-window         |
| C-x 5     | *-other-frame          |
| C-x 6     | 2C-mode-map            |
| C-x <RET> | input method           |
| C-x @     | event-apply-*-modifier |
| C-x C-k   | x                      |
| C-x a     | abbrev-map             |
| C-x n     | narrow                 |
| C-x r     | registers/rectangles   |
| C-x t     | tab-prefix-map         |
| C-x v     | vc-prefix-map          |
| M-g       | goto-map               |
| M-o       | facemenu-keymap        |

Bind all keybindings with bind-key.el, and use
=describe-personal-keybindings=.

Consider remapping keybindings like =C-i=, =M-r=, =C-z=, =C-x C-z= since
I barely ever use them.

Don't forget about M-m and M-^, very useful bindings!

#+begin_src emacs-lisp
(defun my-config-visit ()
  (interactive)
  (find-file "~/dotfiles/README.org"))

(bind-keys
 ("C-x x"                    . my-config-visit)
 ("M-o"                      . other-window)
 ;; ("M-O"                      . mode-line-other-buffer)
 ("M-E"                      . mark-end-of-sentence)
 ("M-T"                      . transpose-sentences)
 ("C-x M-t"                  . transpose-paragraphs)
 ("M-K"                      . kill-paragraph)
 ("C-:"                      . eval-print-last-sexp)
 ("M-R"                      . raise-sexp)
 ("S-SPC"                    . cycle-spacing)
 ("C-x 4 o"                  . display-buffer)
 ;; so that M-= works without a selected region
 ([remap count-words-region] . count-words)
 ([remap upcase-word]        . upcase-dwim)
 ([remap downcase-word]      . downcase-dwim)
 ([remap capitalize-word]    . capitalize-dwim)
 ;; ([remap kill-buffer]        . kill-buffer-and-window)
 ("<f1>"                     . nil)
 ("<f2>"                     . nil))
#+end_src

*** Locale
#+begin_src emacs-lisp
(setq user-full-name "André A. Gomes"
      user-mail-address "andremegafone@gmail.com")

(use-package solar
  :config
  (defvar location-alist
    '((piter . (59.94 30.31 "Санкт-Петербург, Россия"))
      (porto . (41.16 -8.63 "Porto, Portugal")))
    "An alist of locations featuring lat/lon and a label.")

  (defun set-calendar-parameters (location)
    (let ((parameters (alist-get location location-alist)))
      (setq calendar-latitude (nth 0 parameters)
            calendar-longitude (nth 1 parameters)
            calendar-location-name (nth 2 parameters))))

  (set-calendar-parameters 'piter))

(use-package calendar
  :custom
  (calendar-week-start-day 1)
  (calendar-date-style 'iso)
  :hook (calendar-today-visible-hook . calendar-mark-today))

(use-package time
  :custom
  (display-time-format "%H:%M %a %d %b")
  (display-time-default-load-average nil)
  (display-time-world-list '(("Europe/Moscow" "Москва")
                             ("Europe/Lisbon" "Lisboa")))
  :config (display-time-mode))
#+end_src

**** WIP Input method and dicts
The portuguese aspell dictionary sucks, why?

Study this to package yeis properly.
(info "(elisp) Packaging")

#+begin_src emacs-lisp
(setq yeis-dir (expand-file-name "repos/emacs-yeis/" "~"))
(load-file (concat yeis-dir "yeis.el"))
(load-file (concat yeis-dir "x-leim/robin-packages.el"))
(load-file (concat yeis-dir "x-leim/x-leim-list.el"))

;; (add-to-list 'load-path "/home/aadcg/repos/emacs-yeis/")

(setq-default default-input-method "robin-russian"
              yeis-path-plain-word-list (concat yeis-dir "wordlist")
              robin-current-package-name "robin-russian")

(global-set-key (kbd "C-|") 'yeis-transform-previous-word)

(use-package ispell
  :custom (ispell-dictionary "en_GB")
  :hook
  ((input-method-activate-hook   . (lambda () (ispell-change-dictionary "ru")))
   (input-method-deactivate-hook . (lambda () (ispell-change-dictionary "en_GB")))))
#+end_src

**** Holidays
(info "(emacs) Holidays")

#+begin_src emacs-lisp
(use-package holidays
  :init
  (setq holiday-bahai-holidays nil
        holiday-oriental-holidays nil
        holiday-islamic-holidays nil
        holiday-hebrew-holidays nil
        holiday-christian-holidays nil
        holiday-general-holidays
        '(;; Portuguese Public Holidays
          (holiday-fixed 1 1      "Ano Novo")
          (holiday-easter-etc -47 "Carnaval")
          (holiday-easter-etc -2  "Sexta-feira Santa")
          (holiday-easter-etc 0   "Domingo de Páscoa")
          (holiday-fixed 3 19     "Dia do Pai")
          (holiday-fixed 4 25     "Dia da Liberdade")
          (holiday-fixed 5 1      "Dia do Trabalhador")
          (holiday-easter-etc +60 "Corpo de Deus")
          (holiday-float 5 0 1    "Dia da Mãe")
          (holiday-fixed 6 10     "Dia de Portugal, de Camões e das Comunidades Portuguesas")
          (holiday-fixed 8 15     "Assunção de Nossa Senhora")
          (holiday-fixed 10 5     "Implantação da República")
          (holiday-fixed 11 1     "Dia de Todos-os-Santos")
          (holiday-fixed 12 1     "Restauração da Independência")
          (holiday-fixed 12 8     "Imaculada Conceição")
          (holiday-fixed 12 24    "Consoada")
          (holiday-fixed 12 25    "Natal")
          ;; Russian Public Holidays
          (holiday-fixed 1 1  "Новый Год")
          (holiday-fixed 1 2  "Новогодние Каникулы")
          (holiday-fixed 1 3  "Новогодние Каникулы")
          (holiday-fixed 1 4  "Новогодние Каникулы")
          (holiday-fixed 1 5  "Новогодние Каникулы")
          (holiday-fixed 1 6  "Новогодние Каникулы")
          (holiday-fixed 1 7  "Рождество Христово")
          (holiday-fixed 1 8  "Новогодние Каникулы")
          (holiday-fixed 2 23 "День Защитника Отечества")
          (holiday-fixed 3 8  "Международный Женский День")
          (holiday-fixed 5 1  "Праздник Весны и Труда")
          (holiday-fixed 5 9  "День Победы")
          (holiday-fixed 6 12 "День России")
          (holiday-fixed 11 4 "День Народного Единства")
          ;; Miscellaneous
          (holiday-fixed 2 14  "Valentine's Day")
          (holiday-fixed 4 1   "April Fools' Day")
          (holiday-fixed 10 31 "Halloween"))
        holiday-local-holidays
        '(;; Porto, PT
          (holiday-fixed 6 24 "Dia de São João")
          ;; Санкт-Петербург, Россия
          (holiday-fixed 1 27 "День Снятия Блокады")
          (holiday-fixed 5 27 "День Города"))
        holiday-other-holidays nil))
#+end_src

*** Startup and state
#+begin_src emacs-lisp
(use-package emacs
  :custom
  (initial-buffer-choice
   (lambda ()
     (org-agenda-list 1)
     (my-switch-to-agenda)
     (delete-other-windows)))
  (initial-scratch-message ";; Happy Hacking!\n\n")
  (inhibit-startup-screen t)
  (put 'narrow-to-region 'disabled nil))

(use-package savehist
  :custom (history-length 500)
  :config (savehist-mode))

(use-package recentf
  :custom (recentf-max-saved-items 500)
  :config (recentf-mode))

(use-package saveplace
  :config (save-place-mode))
#+end_src

**** Desktop
(info "(emacs) Saving Emacs Sessions")

#+begin_src emacs-lisp
(use-package desktop
  :custom
  (desktop-files-not-to-save ".")
  (desktop-globals-to-clear nil)
  (desktop-restore-frames nil)
  (desktop-lazy-verbose nil)
  :config
  (add-to-list 'desktop-clear-preserve-buffers "\\*info\\*")
  (add-to-list 'desktop-modes-not-to-save 'image-mode)
  (add-to-list 'desktop-modes-not-to-save 'eww-mode)
  (desktop-save-mode))
#+end_src

**** Server
(info "(emacs) Emacs Server")

#+begin_src emacs-lisp
(use-package server
  :custom (server-temp-file-regexp "\\`/tmp/Re\\|/draft\\'\\|\\.tmp")
  :config (unless (server-running-p) (server-start)))
#+end_src

*** Aesthetics
**** Font
(info "(emacs) Fonts")

#+begin_src emacs-lisp
(defun my-auto-size-font (arg font)
  "Set FONT size such that ARG number of FILL-COLUMN fit in a buffer.
Example: M-2 M-x my-auto-size-font RET iosevka"
  ;; Refactor recursively.
  (interactive "P\nsFont: ")
  (let ((size 1.0))
    (set-frame-font (concat font "-" (number-to-string size)) nil t)
    (while (>= (save-window-excursion
                (delete-other-windows)
                (window-max-chars-per-line))
              (* arg (+ fill-column 15)))
      (setq size (+ size 0.5))
      (set-frame-font (concat font "-" (number-to-string size)) nil t))
    (message "The suggested font size is %f" size)
    (number-to-string size)))

(add-to-list 'default-frame-alist '(font . "Iosevka-21.5"))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

**** Theme
I prefer a light theme at night, as long as the screen brightness is
adjusted accordingly.  This also avoids the circus of configuring theme
togglers on browsers or other GUI programs.

I need to get a lamp on my desk.

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  (setq modus-themes-no-mixed-fonts t
	      modus-themes-fringes 'faint
	      modus-themes-syntax 'faint
        modus-themes-completions 'moderate
        modus-themes-lang-checkers 'straight-underline
	      modus-themes-links 'neutral-underline
	      modus-themes-region 'bg-only
	      modus-themes-org-blocks 'grayscale
	      modus-themes-scale-headings t)
  (modus-themes-load-themes)
  :config
  ;; Auto toggle; if before sunrise then load vivendi, else load operandi!
  ;; (let* ((inhibit-message t)
  ;;        (sunrise (nth 1 (split-string (sunrise-sunset))))
  ;;        (sunset (nth 4 (split-string (sunrise-sunset)))))
  ;;   (run-at-time sunrise
  ;;                (* 60 60 24)
  ;;                'modus-themes-load-operandi)
  ;;   (run-at-time sunset
  ;;                (* 60 60 24)
  ;;                'modus-themes-load-vivendi))
  (modus-themes-load-operandi))

(use-package fringe
  :config (fringe-mode '(8 . 0)))
#+end_src

**** Modeline
#+begin_src emacs-lisp
(use-package simple
  :config (column-number-mode))

(use-package minions
  :custom
  (minions-direct '(org-tree-slide-mode
                    geiser-mode
                    yeis-mode))
  (minions-mode-line-delimiters '("" . ""))
  :config (minions-mode))

(use-package battery
  :unless termux-p
  :custom
  (battery-mode-line-format " ⌁ %p%")
  (battery-mode-line-limit 25)
  :config (display-battery-mode))
#+end_src

** Emacs completion
(info "(emacs) Icomplete")
(info "(emacs) Completion Styles")

Icomplete is ok, but I think it should update its contents everytime the
user moves the point.  Packages such as orderless are interesting when
one is looking for more completion styles.

Maybe I should get rid of initials.  Or keep it to match file names only.

#+begin_src emacs-lisp
(use-package icomplete
  :custom
  (icomplete-prospects-height 1)
  (icomplete-separator "   ")
  (icomplete-max-delay-chars 0)
  (icomplete-in-buffer t)
  :config
  (icomplete-mode)
  (unless (version<= emacs-version "27") (fido-mode))
  :hook (icomplete-minibuffer-setup-hook
         . (lambda () (setq-local completion-styles '(initials
                                                 substring
                                                 flex
                                                 partial-completion)
                             icomplete-show-matches-on-no-input nil))))

(use-package company
  :disabled
  :custom (company-selection-wrap-around t)
  :config (global-company-mode)
  :bind (:map company-active-map
              ("C-j"      . company-complete-selection)
              ("C-n"      . company-select-next)
              ("C-p"      . company-select-previous)
              ("<tab>"    . company-complete-common-or-cycle)
              ("C-h"      . company-show-doc-buffer)
              ("M-."      . company-show-location)
              ("RET"      . nil)
              ("<return>" . nil)))
#+end_src

** Projects
*** Version Control
Get rid of ssh agency when the ssh keys will be manager by gpg.

#+begin_src conf :tangle ~/.config/git/config
[user]
  name = André A. Gomes
  email = andremegafone@gmail.com
  signingkey = E407570BBE3A8031155910B30DDDBDB1BDA03027
[commit]
  gpgsign = true
[core]
  editor = emacsclient -c
#+end_src

#+begin_src emacs-lisp
(use-package vc
  :custom (vc-follow-symlinks t))

(use-package magit
  :custom
  (magit-log-section-commit-count 50)
  (magit-clone-default-directory "~/repos")
  :bind ("C-x g" . magit-status))

(use-package diff-hl
  :custom (diff-hl-draw-borders nil)
  :config (global-diff-hl-mode)
  :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh))

;; to avoid passphrase prompts
(use-package ssh-agency)
#+end_src

*** Utilities
(info "(emacs) Projects")
(info "(emacs) Parentheses")

#+begin_src emacs-lisp
(use-package paren
  :custom
  (show-paren-delay 0)
  (show-paren-when-point-inside-paren t)
  ;; (show-paren-when-point-in-periphery t)
  :config
  (show-paren-mode))

(use-package prog-mode
  :config (global-prettify-symbols-mode))

;; configure electric-layout-mode
(use-package electric
  :config
  (electric-indent-mode)
  (electric-pair-mode))

(use-package comint
  :bind (:map comint-mode-map
              ("M-p" . comint-previous-matching-input-from-input)
              ("M-n" . comint-next-matching-input-from-input)
              ("SPC" . comint-magic-space)))

(use-package ediff-wind
  :custom (ediff-window-setup-function 'ediff-setup-windows-plain))

(use-package subword
  :hook (prog-mode-hook . subword-mode))

(use-package flyspell
  :hook ((text-mode-hook . flyspell-mode)
         (prog-mode-hook . flyspell-prog-mode)))

(use-package flymake
  :hook (prog-mode-hook . flymake-mode)
  :bind (:map flymake-mode-map
              ("C-c ! s" . flymake-start)
              ("C-c ! d" . flymake-show-diagnostics-buffer)
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error)))
#+end_src

*** Programming languages and files
**** Lisp
(info "(emacs) Lisp Indent")

#+begin_src emacs-lisp
(use-package elisp-mode
  :config
  (defun my-remove-elc-on-save ()
    "When saving an elisp file, the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))
  :hook (emacs-lisp-mode-hook . my-remove-elc-on-save)
  :bind (:map lisp-mode-shared-map
              ("RET" . reindent-then-newline-and-indent)))

(use-package geiser
  :custom (geiser-default-implementation 'guile))

(use-package slime
  :custom
  (inferior-lisp-program "sbcl")
  (slime-lisp-implementations `((sbcl-nyxt
                                 (lambda () (nyxt-make-guix-sbcl-for-nyxt
                                        "~/common-lisp/nyxt")))))
  ;; (info "(slime) Compound Completion") this is disabled.  is it cool?
  ;; complain upsteam because c-p-c misbehaves
  ;; (slime-completion-at-point-functions '(slime-c-p-c-completion-at-point slime-filename-completion slime-simple-completion-at-point))
  ;; (slime-port 4006)
  :config
  (defun my-nyxt-connect ()
    "Connect to a running Nyxt instance."
    (interactive)
    (let ((slime-protocol-version 'ignore))
      (slime-connect "127.0.0.1" "4006"))))

(load "~/common-lisp/nyxt/build-scripts/nyxt-guix.el" :noerror)
;; (load "/gnu/store/r6npagnd8l1l8jgwrx1dika8bgkwrwa1-cl-parenscript-2.7.1-1.7a1ac46/share/common-lisp/source/cl-parenscript/extras/js-expander.el")

;; Common Lisp Hyperspec locally available
(require 'clhs)
(clhs-setup)
#+end_src

***** COMMENT Emacs packages
#+begin_src emacs-lisp
(use-package flycheck-package
  :after flycheck
  :config (flycheck-package-setup))

(use-package package-lint-flymake
  :after flymake
  :hook (emacs-lisp-mode-hook . package-lint-flymake-setup)
  :config (remove-hook 'flymake-diagnostic-functions
                       'flymake-proc-legacy-flymake))
#+end_src

**** Python
#+begin_src emacs-lisp
(use-package python
  ;; :config
  ;; (add-hook 'python-mode-hook (lambda ()
  ;;                             (require 'sphinx-doc)
  ;;                             (sphinx-doc-mode t)))
  :custom
  (python-shell-interpreter-args "-i --simple-prompt")
  (python-shell-interpreter "ipython"))

(use-package elpy)
#+end_src

**** Bash
***** Shell
#+begin_src emacs-lisp
(use-package shell
  :custom (shell-command-prompt-show-cwd t))
#+end_src

***** Eshell
There's an issue with tramp-gvfs when I run:

$ cd /afp:USER@HOST:PATH

[[gnus:INBOX#877dkm5w71.fsf@gmx.de][Email from Michael Albinus: Re: Package `tramp-gvfs' not supported]]

#+begin_src emacs-lisp
(use-package eshell
  :custom
  (eshell-history-size 9999)
  (eshell-hist-ignoredups t)
  (eshell-destroy-buffer-when-process-dies t)
  :config (add-to-list 'eshell-modules-list 'eshell-tramp)
  :hook
  (eshell-mode-hook . (lambda () (company-mode -1)))
  (eshell-pre-command-hook . 'eshell-save-some-history)
  :bind ("<s-return>" . eshell))

;; (use-package em-term
;;   :config
;;   (add-to-list 'eshell-visual-commands "alsamixer"))
#+end_src

#+begin_src sh :tangle ~/.emacs.d/eshell/alias :comments nil
alias ll ls -Atrhlb --group-directories-first
alias zoom flatpak run us.zoom.Zoom
alias jitsi flatpak run org.jitsi.jitsi-meet
#+end_src

**** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :hook
  ((haskell-mode-hook . haskell-doc-mode)
   (haskell-mode-hook . (lambda () turn-on-haskell-indent))
   (haskell-mode-hook . interactive-haskell-mode))
  :bind (:map interactive-haskell-mode-map
              ("C-c C-c" . haskell-interactive-bring)))
#+end_src

**** COMMENT \LaTeX
#+begin_src emacs-lisp
(use-package tex-mode
  :hook (tex-mode-hook . (lambda () (setq ispell-parser 'tex))))

(use-package auctex)
#+end_src

**** Files
#+begin_src emacs-lisp
(use-package markdown-mode
  :custom (markdown-fontify-code-blocks-natively t)
  ;; :mode ("\\.md$" . markdown-mode)
  )

(use-package yaml-mode
  :mode (("\\.yml\\'"  . yaml-mode)
         ("\\.yaml\\'" . yaml-mode)))

(use-package csv-mode :disabled)
#+end_src

** Org-mode
#+begin_src emacs-lisp
(use-package org
  :custom
  ;; general
  (org-use-speed-commands t)
  (org-adapt-indentation nil)
  (org-hide-leading-stars t)
  (org-M-RET-may-split-line '((default . nil)))
  (org-directory "~/NextCloud/org/")
  ;; lists
  (org-list-demote-modify-bullet '(("-" . "+") ("+" . "-")))
  (org-list-indent-offset 1)
  ;; links
  (org-return-follows-link t)
  ;; latex
  (org-format-latex-options (plist-put org-format-latex-options :scale 2))
  (org-preview-latex-image-directory "ltximg/")
  ;; images
  (org-startup-with-inline-images t)
  (org-image-actual-width 500)
  ;; agenda
  (org-agenda-skip-deadline-prewarning-if-scheduled t)
  (org-agenda-include-diary t)
  (org-agenda-start-on-weekday nil)
  (org-agenda-files '("~/NextCloud/org/"))
  (org-todo-keywords
   '((sequence "TODO(t!)" "WIP(s!)" "WAITING(w@)" "|"
               "DONE(d!)" "CANCEL(c@)")))
  (org-todo-keyword-faces '(("WIP" . "orange")
                            ("WAITING" . "orange")))
  ;; literate programming
  (org-src-fontify-natively t)
  (org-edit-src-persistent-message nil)
  (org-src-window-setup 'current-window)
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  :config
  (customize-set-variable
   'org-structure-template-alist
   (append org-structure-template-alist
           '(("thm"  . "theorem")
             ("pf"   . "proof")
             ("lem"  . "lemma")
             ("cor"  . "corollary")
             ("def"  . "definition")
             ("rem"  . "remark")
             ("exer" . "exercise")
             ("prop" . "proposition")
             ("el"   . "src emacs-lisp"))))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (lisp       . t)
     (scheme     . t)
     (python     . t)
     (haskell    . t)
     (latex      . t)
     (shell      . t)))

  (when termux-p
    (add-to-list 'org-file-apps '("\\.pdf\\'" . "termux-open %s")))

  (defun my-switch-to-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*"))

  (defun my-org-checkbox-next ()
    "Mark checkboxes and sort."
    (interactive)
    (let ((home (point)))
      (when (org-at-item-checkbox-p)
        (org-toggle-checkbox)
        (org-sort-list nil ?x)
        (goto-char home))))

  (defun my-diary-last-day-of-month (date)
    "Return `t` if DATE is the last day of the month.
Credit to https://emacs.stackexchange.com/a/31708/19054."
    (let* ((day (calendar-extract-day date))
           (month (calendar-extract-month date))
           (year (calendar-extract-year date))
           (last-day-of-month
            (calendar-last-day-of-month month year)))
      (= day last-day-of-month)))

  :bind (("C-c a"     . org-agenda)
         ("C-c c"     . org-capture)
         ("C-c l"     . org-store-link)
         ("C-x f"     . my-switch-to-agenda)
         :map org-mode-map
         ("C-'"       . nil)
         ("C-,"       . nil)
         ("C-<tab>"   . org-force-cycle-archived)
         ("C-c j"     . my-org-checkbox-next)
         ("<mouse-1>" . my-org-checkbox-next)))
#+end_src

*** WIP Exports
#+begin_src emacs-lisp
(use-package ox-beamer)
(use-package ox-texinfo)

(add-to-list 'org-latex-packages-alist
             '("russian,main=english" "babel" t ("pdflatex")))
(add-to-list 'org-latex-packages-alist
             '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

(setq org-latex-listings t)
(add-to-list 'org-latex-packages-alist '("" "listings"))

(add-to-list 'org-latex-classes
             '("aadcg-article"
               "\\documentclass[11pt]{amsart}
[DEFAULT-PACKAGES]
[PACKAGES]
\\usepackage{amsthm}
\\newtheorem{theorem}{Theorem}[section]
\\newtheorem{lemmma}[theorem]{Lemma}
\\newtheorem{proposition}[theorem]{Proposition}
\\newtheorem{corollary}[theorem]{Corollary}

\\theoremstyle{definition}
\\newtheorem{definition}{Definition}[section]
\\newtheorem{example}{Example}[section]
\\newtheorem{exercise}[exa]{Exercise}

\\theoremstyle{remark}
\\newtheorem{remark}{Remark}
\\newtheorem{note}{Note}
\\newtheorem{case}{case}
[EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** Extensions
[[https://gitlab.com/phillord/org-drill][org-drill documentation]]

#+begin_src emacs-lisp
(use-package org-drill
  :custom
  (org-drill-save-buffers-after-drill-sessions-p nil)
  (org-drill-scope 'tree)
  :config (require 'org-drill))

(use-package org-drill-table)

(use-package org-fragtog
  :hook (org-mode-hook . org-fragtog-mode))

(use-package org-tree-slide
  :custom
  (org-tree-slide-breadcrumbs nil)
  (org-tree-slide-slide-in-effect nil)
  (org-tree-slide-never-touch-face t)
  (org-tree-slide-activate-message nil)
  (org-tree-slide-deactivate-message nil)
  :config
  (defun my-presenting ()
    "Presenting mode"
    (interactive)
    (setq mode-line-format nil)
    (global-diff-hl-mode 0)
    (my-auto-size-font 1))

  (defun my-non-presenting ()
    "Non-presenting mode"
    (interactive)
    (revert-buffer nil t)
    (global-diff-hl-mode)
    (my-auto-size-font 2))
  :hook
  ((org-tree-slide-play-hook . my-presenting)
   (org-tree-slide-stop-hook . my-non-presenting))
  :bind (:map org-tree-slide-mode-map
              ("C->"  . org-tree-slide-move-next-tree)
              ("C-<"  . org-tree-slide-move-previous-tree)))
#+end_src

** Emacs OS - The Kitchen Sink
*** EXWM
[[file:~/.config/guix/current/share/guile/site/3.0/gnu/packages/emacs-xyz.scm::(define-public emacs-exwm][GNU Guix expects EXWM config at ~/.exwm]]
[[https://github.com/ch11ng/exwm/wiki][EXWM wiki]]

- how to go back and forth workspaces?
- s-m media
- s-p power
- add mirror-screen utility
- [[https://github.com/ch11ng/exwm/wiki#how-to-send-c-c-to-term][how to copy/paste in firefox? C-c is intercepted even in char-mode,
  why?]]

[[file:~/repos/ambrevar-dotfiles/.config/shepherd/services.scm::define location-paris "48.51:2.20"][configure gammastep as a guix service]]

#+begin_src conf :tangle ~/.config/gammastep/config.ini :comments nil
[general]
temp-day=5700
temp-night=4000
fade=1
; brightness-day=0.7
brightness-night=0.45
; gamma=0.8
; gamma=0.8:0.7:0.8
; gamma-day=0.8:0.7:0.8
; gamma-night=0.6
location-provider=manual
adjustment-method=randr

[manual]
lat=59.94
lon=30.31
#+end_src

#+begin_src emacs-lisp :tangle ~/.exwm
(use-package exwm
  ;; add a wallpaper: $feh --no-fehbg --bg-scale 'path.png'
  :init
  (require 'exwm)
  (exwm-enable)
  (require 'exwm-randr)
  (exwm-randr-enable)
  (desktop-environment-mode)
  (setq exwm-workspace-number 4)
  (setq exwm-input-global-keys
        `(([?\s-r] . exwm-reset)
          ([?\s-f] . exwm-input-toggle-keyboard)
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i) `(,(kbd (format "s-%d" i)) .
                             (lambda ()
                               (interactive) (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))
          ;; Bind "s-L" to lock the screen and suspend
          ([?\s-L] . (lambda () (interactive)
                       (start-process "" nil "loginctl suspend && xlock")))))

  (defun exwm-change-screen ()
    "Mutually exclusively enable the external monitor or built-in
monitor."
    (let ((xrandr-output-regexp "\n\\([^ ]+\\) connected ")
          default-output)
      (with-temp-buffer
        (call-process "xrandr" nil t nil)
        (goto-char (point-min))
        (re-search-forward xrandr-output-regexp nil 'noerror)
        (setq default-monitor (match-string 1))
        (if (re-search-forward xrandr-output-regexp nil 'noerror)
            (call-process
             "xrandr" nil nil nil
             "--output" (match-string 1) "--primary" "--auto"
             "--output" default-monitor "--off")
          (call-process
           "xrandr" nil nil nil
           "--output" default-monitor "--auto")))))

  :hook
  ((exwm-randr-screen-change-hook . exwm-change-screen)
   (exwm-update-class-hook        . (lambda ()
                                      (exwm-workspace-rename-buffer
                                       exwm-class-name)))
   (exwm-update-title-hook        . (lambda ()
                                      (exwm-workspace-rename-buffer
                                       exwm-title)))
   (exwm-init-hook                . (lambda ()
                                      (start-process "gammastep"
                                                     "*gammastep*"
                                                     "gammastep"
                                                     "-v")))))

;; Local Variables:
;; mode: emacs-lisp
;; End:
#+end_src

*** Desktop utils
- send a patch to desktop-environment to add parameters to slock
- add options for poweroff, reboot, etc
- add a proper volume interface similar to C-x C-+
- update desktop-environment in guix to 0.4.0.
- (desktop-environment-screenshot) should write to the minibuffer.

To connect to a new wifi:
nmcli device wifi connect "$SSID" password "$PASSWORD"

#+begin_src emacs-lisp
(use-package desktop-environment
  :custom
  (desktop-environment-brightness-set-command "sudo light %s")
  (desktop-environment-brightness-get-command "sudo light")
  (desktop-environment-brightness-normal-decrement "-U 10")
  (desktop-environment-brightness-normal-increment "-A 10")
  (desktop-environment-brightness-small-decrement "-U 5")
  (desktop-environment-brightness-small-increment "-A 5")
  (desktop-environment-screenshot-command "scrot '%F_%T.png'")
  (desktop-environment-screenshot-partial-command "scrot '%F_%T.png' -s")
  :config
  (defun my-turn-off-wifi-light ()
    "Turn off annoying TP Link light"
    (interactive)
    (let ((led (my-shell-cmd "light -L | grep ath")))
      (eshell-command (format "sudo light -s  %s -S 0" led))))

  (defun my-shell-cmd (command)
    "Run CMD and output the result to a string without trailing spaces."
    (let ((cmd (concat command " | tr -d [:space:]")))
      (shell-command-to-string cmd)))

  ;; use call-process instead of shell-command
  (defun my-toggle-wifi ()
    "Toggle wifi connection."
    (interactive)
    (let ((wifi-state
           (my-shell-cmd "nmcli radio wifi")))
      (if (string-match-p wifi-state "disabled")
          (progn
            (shell-command "nmcli radio wifi on")
            (my-turn-off-wifi-light))
        (shell-command "nmcli radio wifi off"))))

  (defalias 'desktop-environment-toggle-wifi 'my-toggle-wifi))

(use-package gif-screencast
  :custom (gif-screencast-output-directory "~/Pictures")
  :config
  (when (getenv "WAYLAND_DISPLAY")
    (setq gif-screencast-program "grim"
          gif-screencast-args nil))
  :bind
  ("<f8>" . gif-screencast-toggle-pause)
  ("<f9>" . gif-screencast-start-or-stop))

(use-package keycast
  :custom (keycast-separator-width 1)
  :config
  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil))))

(use-package avoid
  :unless termux-p
  :config
  (when (display-mouse-p)
    (mouse-avoidance-mode 'jump)))

;; (use-package emacs
;;   :config
;;   (defun run-system-command (action)
;;     "TODO"
;;     (interactive "sWhat should I do? ")
;;     (let ((cmd (format "loginctl %s" action)))
;;       (start-process-shell-command cmd nil cmd)))
;;   :bind
;;   (("s-p p" . (lambda () (run-system-command "poweroff")))
;;    ("s-p r" . (lambda () (run-system-command "reboot")))
;;    ("s-p s" . (lambda () (run-system-command "suspend")))))

;; (shell-command "loginctl suspend && xlock")
#+end_src

*** Web browsing
I should probably define a way to either open a link in nyxt or firefox.

Maybe I should scale things using xrandr.

#+begin_src emacs-lisp
(setenv "GDK_DPI_SCALE" "0.5")
(setenv "GDK_SCALE" "2")
;; to make nyxt's external editor function work
(setenv "VISUAL" "emacsclient")

(use-package shr
  :custom
  (shr-use-fonts nil)
  (shr-use-colors nil)
  (shr-max-image-proportion 0.7)
  (shr-width (current-fill-column))
  (shr-image-animate nil)               ; otherwise emacs works slowly
  (browse-url-generic-program "nyxt")
  :config
  (if termux-p
      (setq shr-external-browser
            (lambda (url) (shell-command (concat "termux-open-url " url))))
    (setq shr-external-browser 'browse-url-generic)))

(use-package eww
  :custom
  (eww-suggest-uris '(eww-links-at-point
                      thing-at-point-url-at-point
                      word-at-point))
  :bind ("C-x w" . eww))

(use-package browse-url
  :custom
  (browse-url-browser-function '(("youtube" . browse-url-firefox)
                                 (".*"      . eww-browse-url))))
#+end_src

[[https://github.com/aartaka/nyxt-config/blob/master/init.lisp][aatarka config]]

#+begin_src lisp :tangle ~/.config/nyxt/init.lisp
(defvar *my-keymap* (make-keymap "my-map"))
(define-key *my-keymap*
  "C-s"   'nyxt/web-mode:search-buffer
  "C-g"   'nyxt/web-mode:remove-search-hints
  "C-h a" 'describe-any)

;; https://github.com/atlas-engineer/nyxt/issues/1020
;; "j"       'nyxt/web-mode:follow-hint
;; "J"       'nyxt/web-mode:follow-hint-new-buffer
;; "C-u j"   'nyxt/web-mode:follow-hint-new-buffer-focus
;; "d"       'list-downloads
;; "g"       'reload-current-buffer
;; "l"       'nyxt/web-mode:history-backwards
;; "r"       'nyxt/web-mode:history-forwards
;; "L"       'nyxt/web-mode:history-backwards-query
;; "R"       'nyxt/web-mode:history-forwards-query
;; "b"       'bookmark-current-page
;; "B"       'list-bookmarks
;; "s"       'switch-buffer
;; "S"       'list-buffers
;; "w"       'copy-url

(define-mode my-mode ()
  "Dummy mode for the custom key bindings in `*my-keymap*'."
  ((keymap-scheme :initform (keymap:make-scheme
                             scheme:emacs *my-keymap*))))

(define-configuration browser
  ((session-restore-prompt :never-restore)
   (autofills (list (nyxt::make-autofill :key "Name" :fill "André A. Gomes")
                    (nyxt::make-autofill :key "Email"
                                         :fill "andremegafone@gmail.com")
                    (nyxt::make-autofill :name "Hello Printer"
                                         :key "Function example"
                                         :fill
                                         (lambda () (format nil "hello!")))))))

(define-configuration (buffer web-buffer)
  ((default-modes (append '(emacs-mode
                            my-mode)
                          %slot-default%))
   (conservative-word-move t)
   (override-map (let ((map (make-keymap "my-override-map")))
                   (define-key map
                     "M-x" 'execute-command
                     "menu" 'execute-command)))))

(define-configuration web-buffer
  ((default-modes (append
                   '(blocker-mode
                     force-https-mode
                     ;; proxy-mode
                     ;; auto-mode
                     ;; noimage-mode
                     ;; noscript-mode
                     )
                   %slot-default%))
   (default-new-buffer-url "about:blank")))

;; auto-mode could replace this
(define-configuration nyxt/proxy-mode:proxy-mode
    ((proxy-mode
      ;; nyxt/proxy-mode::proxy
      (make-instance 'proxy
                     :server-address (quri:uri "socks5://localhost:9050")
                     :allowlist '("localhost" "localhost:8080" "gitlab.com")
                     :proxied-downloads-p t))))

(define-configuration nyxt/web-mode:web-mode
   ;; QWERTY home row.
  ((nyxt/web-mode:hints-alphabet "DSJKHLFAGNMXCWEIO")))

(define-configuration prompt-buffer
    ((default-modes (list* 'emacs-mode %slot-default%))))

(define-configuration status-buffer
    ((height 10)))

;; start nyxt from the REPL
;; (nyxt:start :socket "/tmp/nyxt.socket" :data-profile "dev")
(define-class dev-data-profile (data-profile)
  ((name :initform "dev"))
  (:documentation "Development profile."))

(defmethod nyxt:expand-data-path ((profile dev-data-profile) (path data-path))
  "Persist data to /tmp/nyxt/."
  (expand-default-path (make-instance (class-name (class-of path))
                                      :basename (basename path)
                                      :dirname "/tmp/nyxt/")))
#+end_src

*** Communication
**** Email (gnus)
- [[https://www.fsf.org/resources/webmail-systems][FSF advice]]
- [[https://www.emacswiki.org/emacs/GnusTutorial][GNUS tutorial 1]]; [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org#my-gnusel][GNUS tutorial 2]]
- [[https://github.com/kensanata/ggg#gmail-gnus-gpg-guide-gggg][how to encrypt]]

[[https://www.bounga.org/tips/2020/05/03/multiple-smtp-accounts-in-gnus-without-external-tools/][This]] blog post helped me to set up gnus with multiple accounts.

(info "(gnus) Posting Styles")

/ N fetches new messages.

#+begin_src emacs-lisp
(use-package gnus
  :custom
  (mail-user-agent 'gnus-user-agent)
  (gnus-select-method '(nnnil nil))
  (gnus-secondary-select-methods
   '((nnimap "home"
             (nnimap-address "imap.gmail.com")
             (nnimap-server-port "imaps")
             (nnimap-stream ssl)
             (nnir-search-engine imap)
             (nnmail-expiry-target "nnimap+home:[Gmail]/Trash")
             (nnmail-expiry-wait 'immediate))
     (nnimap "work"
             (nnimap-address "mail.gandi.net")
             (nnimap-server-port "imaps")
             (nnimap-stream ssl)
             (nnir-search-engine imap)
             (nnmail-expiry-target "nnimap+work:[Gandi]/Trash")
             (nnmail-expiry-wait 'immediate))))
  (gnus-inhibit-startup-message t)
  (gnus-interactive-exit 'quiet)
  (gnus-always-read-dribble-file t)
  ;; :hook
  ;; (message-send-hook . ispell-message)
  :bind ("C-c m" . gnus))

;; (gnus-alive-p)

(use-package gnus-msg
  :after gnus
  :custom
  (gnus-posting-styles
   '((".*"
      (signature "André A. Gomes\n\"Free Thought, Free World\"")
      (name (user-full-name)))
     ("home"
      (address "andremegafone@gmail.com")
      ("X-Message-SMTP-Method"
       "smtp smtp.gmail.com 587 andremegafone@gmail.com"))
     ("work"
      (address "andre.gomes@astrolabium.io")
      ("X-Message-SMTP-Method"
       "smtp mail.gandi.net 587 andre.gomes@astrolabium.io")))))

(use-package gnus-art
  :after gnus
  :commands gnus-mime-button-map
  :bind (:map gnus-mime-button-map
              ("RET" . gnus-mime-copy-part)))

(use-package gnus-async
  :after gnus
  :custom (gnus-asynchronous t))

(use-package message
  :custom
  (mail-signature "André A. Gomes\n\"Free Thought, Free World\"")
  (message-signature "André A. Gomes\n\"Free Thought, Free World\"")
  (message-kill-buffer-on-exit t)
  (message-alternative-emails "")
  (message-default-charset 'utf-8)
  ;; :hook
  ;; (message-setup-hook 'flyspell-mode)
  ;; ((message-setup-hook . mml-secure-message-encrypt)
  ;;  (message-setup-hook . mml-secure-message-sign))
  )

(use-package smtpmail
  :init
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  :custom
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 587)
  ;; (smtpmail-stream-type 'ssl)
  (send-mail-function 'smtpmail-send-it))

;; (use-package mm-encode
;;   :custom
;;   (mm-encrypt-option 'guided)
;;   (mm-sign-option 'guided))

;; (use-package mml-sec
;;   :custom
;;   (mml-secure-openpgp-encrypt-to-self t)
;;   (mml-secure-openpgp-sign-with-sender t)
;;   (mml-secure-smime-encrypt-to-self t)
;;   (mml-secure-smime-sign-with-sender t))

;; WIP Add to message-send-hook
(defun my-mail-missing-attachment-p ()
  "Return t if an attachment is missing."
  (interactive)
  (save-excursion
    (goto-char (message-goto-body))
    (when (re-search-forward "attach")
      (message "Did you forget to attach something?"))))
#+end_src

**** IRC (Freenode)
#+begin_src emacs-lisp
(use-package erc
  :custom
  (erc-autojoin-channels-alist '((".*\.freenode\.net" . ("#nyxt"))))
  :config
  (defun my-freenode ()
    (interactive)
    (let ((erc-plist (car (auth-source-search :host "irc.freenode.net")))
          (erc-prompt-for-password nil))
      (erc :server "irc.freenode.net"
           :nick (plist-get erc-plist :user)
           :password (funcall (plist-get erc-plist :secret))))))
#+end_src

**** Telegram
[[https://zevlg.github.io/telega.el/][documentation]]

#+begin_src emacs-lisp
(use-package telega
  :unless termux-p
  :custom (telega-chat-fill-column 70)
  :config
  (telega-mode-line-mode)
  (global-telega-squash-message-mode)
  :bind ("s-t" . telega))
#+end_src

*** Reader (pdf, djvu, epub)
#+begin_src emacs-lisp
(use-package pdf-tools
  :when window-system
  :config
  (when (>= emacs-major-version 27)
    (setq image-scaling-factor 1))
  ;; this is a hack so that I can use docview links in org-mode
  (defalias 'doc-view-goto-page 'pdf-view-goto-page)
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :hook
  ((pdf-view-mode-hook . pdf-view-fit-height-to-window)
   (pdf-view-mode-hook . pdf-links-minor-mode)
   ;; (pdf-view-mode-hook . pdf-annot-minor-mode)
   (pdf-view-mode-hook . pdf-history-minor-mode)
   (pdf-view-mode-hook . pdf-view-auto-slice-minor-mode)
   (pdf-view-mode-hook . (lambda () (when (eq (frame-parameter nil 'background-mode)
                                         'dark)
                                 (pdf-view-midnight-minor-mode))))))

(use-package nov
  :custom
  (nov-text-width 80)
  (nov-variable-pitch nil)
  :mode ("\\.epub\\'" . nov-mode))
#+end_src

*** Media
Find a solution to play smb shares other than:
vlc -Z -I rc smb://PATH

[[http://linux.reuf.nl/projects/nas.htmhttp://linux.reuf.nl/projects/nas.htm][DIY NAS]]

The keybindings should depend on the wm I'm in. In EXWM volume setting
must be global.

#+begin_src conf :tangle ~/.config/mpv/mpv.conf
save-position-on-quit
sub-auto=fuzzy
#+end_src

The following keybindings work, even though no information is
displayed.  Evaluate =mpv --input-cmdlist= to get a list to commands.

#+begin_src conf :tangle ~/.config/mpv/input.conf
s playlist-shuffle
u playlist-unshuffle
n playlist-next
p playlist-prev
#+end_src

#+begin_src emacs-lisp
(use-package emms
  :custom (emms-volume-change-amount 5)
  :config
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (emms-mode-line 0)

  (defun my-emms-play-url-at-point ()
    "Same as `emms-play-url' but with url at point."
    (interactive)
    (emms-play-url (or (url-get-url-at-point)
                       (shr-url-at-point current-prefix-arg)))))
#+end_src

*** Authentication
#+begin_src emacs-lisp
(use-package auth-source
  :custom (auth-sources '("~/.authinfo.gpg" "~/.authinfo")))

(use-package pinentry
  :config (pinentry-start))

(use-package epa
  :custom (epa-replace-original-text t))
#+end_src

This is how ~/.authinfo.gpg looks like:

#+begin_example
machine smtp.gmail.com login andremegafone port 587 password SECRET
machine imap.gmail.com login andremegafone port imaps password SECRET
machine localhost port sudo login root password SECRET
machine irc.freenode.net login aadcg password SECRET

;; Local Variables:
;; epa-file-encrypt-to: andremegafone@gmail.com
;; End:
#+end_example

(info "(gnupg) Agent Options")

#+begin_src conf :tangle ~/.gnupg/gpg-agent.conf
default-cache-ttl 86400
max-cache-ttl 86400
enable-ssh-support
default-cache-ttl-ssh 86400
max-cache-ttl-ssh 86400
allow-emacs-pinentry
#+end_src

*** Misc
(info "(debbugs-ug) Top")

#+begin_src emacs-lisp
(use-package guix
  :when (shell-command-to-string "which guix")
  :custom (guix-operation-confirm nil)
  :config (global-guix-prettify-mode)

  (defun guix-patches-debbugs ()
    (interactive)
    (debbugs-gnu debbugs-gnu-default-severities "guix-patches"))

  :hook (scheme-mode-hook . guix-devel-mode)
  :bind ("s-g" . guix))

(use-package debbugs)

(use-package man
  :custom Man-notify-method 'pushy
  :bind (:map Man-mode-map
              ("m" . Man-goto-section)
              ("g" . Man-update-manpage)))

(use-package transmission
  :hook (transmission-mode-hook . hl-line-mode))

(use-package google-translate
  :custom
  (google-translate-default-source-language "auto")
  (google-translate-default-target-language "en")
  (google-translate-backend-method 'curl)
  (require 'google-translate-default-ui)
  :bind
  ("C-c t" . google-translate-at-point)
  ("C-c T" . google-translate-query-translate))
#+end_src

*** Learning russian
#+begin_src emacs-lisp
(defun my-openru-search-at-point ()
  "Search for word, or root of word, at point using openrussian.org."
  (interactive)
  (let ((url "https://en.openrussian.org/ru/"))
    (eww (concat url (or (my-get-root-ru-word) (current-word))))
    ;; use eww-after-render-hook
    (sleep-for 2)
    (forward-paragraph 5)
    (forward-line 1)
    (recenter-top-bottom 2)))

(defun my-ispell-output ()
  "Output as string the evaluation of ispell."
  (let ((ispell-check-only t)
        (inhibit-message t))
    (ispell-change-dictionary "ru")
    (ispell-word)
    ;; hacky and prone to error. ideas?
    (save-excursion
      (set-bufferset-buffer-redisplay "*Messages*")
      (goto-char (- (point-max) 1))
      (buffer-substring-no-properties (point) (move-beginning-of-line 1)))))

(defun my-get-root-ru-word ()
  "Return russian word at point or its root."
  (let* ((ispell-message-output (s-split-words (my-ispell-output)))
         (len (length ispell-message-output)))
    (if (> len 3)
        (nth (1- len) ispell-message-output)
      (nth 0 ispell-message-output))))
#+end_src

* dotfiles I follow
- [[https://github.com/daviwil/dotfiles][David Wilson]]
- [[https://git.sr.ht/~w96k/dotfiles][Mikhail Kirillov]]
- [[https://github.com/oantolin/emacs-config][Omar Antolín Camarena]]
- [[https://gitlab.com/ambrevar/dotfiles][Pierre Neidhardt]]
- [[https://gitlab.com/protesilaos/dotfiles][Protesilaos Stravrou]]
- [[https://gitlab.com/link0ff/emacs-init][Juri Linkov]]

* COMMENT Ideas
** Generate an ssh key from gpg key
** type-break-mode
** Android
[[https://guix.gnu.org/blog/2018/guix-on-android/][Guix on android]]
Syncthing vs Nextcloud vs cron/rsync?

** Lid
if I suspend when the lid is closed, I need to open the lid for the
screen to work.  ONLY if you poweroff the monitor or the laptop!

** Exwm on my laptop's screen
when typing, the cursor kind of hangs.
this doesn't happen when connected to an external screen.

this happens on exwm but not on GNOME!
what if I have both the internal and the external screens connected?
